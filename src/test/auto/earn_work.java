/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test.auto;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author Алексей
 */
public class earn_work extends javax.swing.JFrame {
Connection conn = null;
ResultSet rs = null;

PreparedStatement pst = null;
public String working, working_r;
public boolean canadd = false; /**
     * Creates new form earn_work
     */
    public earn_work() {
          initComponents();
         conn = javaconnect.ConnecrDb();
         Update_table();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        _worker = new org.jdesktop.swingx.JXTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        _work_worker = new org.jdesktop.swingx.JXTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        _worker_report = new org.jdesktop.swingx.JXTable();
        jXButton1 = new org.jdesktop.swingx.JXButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        _working = new org.jdesktop.swingx.JXTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        _worker.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        _worker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _workerMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(_worker);

        _work_worker.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        _work_worker.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _work_workerMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(_work_worker);

        _worker_report.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(_worker_report);

        jXButton1.setText("Отчет");
        jXButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jXButton1ActionPerformed(evt);
            }
        });

        _working.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        _working.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _workingMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(_working);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jXButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 469, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 634, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jXButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
private void _getDataime_of_last_report() throws SQLException{
       SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        SimpleDateFormat tf = new SimpleDateFormat("HH:mm");
SimpleDateFormat dtf = new SimpleDateFormat("yyyy-MM-dd HH:mm");

   String sql2="select Current_datime from report where id=(SELECT max(id) from report)";
   pst=conn.prepareStatement(sql2);
   rs=pst.executeQuery();
   if(rs.next()){
        datime_of_last_report=rs.getTimestamp("Current_datime");
 data_of_order= df.format(rs.getTimestamp("Current_datime"));
time_of_order= tf.format(rs.getTimestamp("Current_datime"));
dt_of_lastt_report= dtf.format(rs.getTimestamp("Current_datime"));
  

   }
    }
    private void _work_workerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__work_workerMouseClicked
  
    }//GEN-LAST:event__work_workerMouseClicked

    private void _workerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__workerMouseClicked
try
{
int row = _worker.getSelectedRow();
 String Table_click=(_worker.getModel().getValueAt(row, 0).toString());
 String sql="SELECT * FROM autoclean_v1.order where Shift='"+Table_click+"'";
  pst =conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if(rs.next()){
                 String add1 = rs.getString("Shift");
                             JOptionPane.showMessageDialog(null, add1);
  Timestamp dt=Timestamp.valueOf(LocalDateTime.now());

              String sql2=  "SELECT Order_dates as Дата, Order_times as Время, Car_number as Номер_автомобиля, "
        + "Klass_of_car as Класс_машины, Kind_of_service as Услуги, "
        + "Second_of_service as Доп_услуги, "
        + "Summa as Оплаченно, Discount as Скидка, Shift as Бригада FROM autoclean_v1.order where Shift='"+add1+"' AND \n "
                      + "Order_dates BETWEEN '"+data_of_order+"' AND '"+dt+"'  AND \n  "
                      + "Order_times BETWEEN '"+data_of_order+"' AND '"+dt+"'";   
              working = add1;
               canadd=true;
              Update_table();  
            try{
   
pst = conn.prepareStatement(sql2);
rs=pst.executeQuery();
_work_worker.setModel(DbUtils.resultSetToTableModel(rs));


}
catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }   
            }
}
catch(Exception e)
{
 JOptionPane.showMessageDialog(null, e);  

}           // TODO add your handling code here:
    }//GEN-LAST:event__workerMouseClicked

    private void jXButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jXButton1ActionPerformed
    try {
        if(canadd==true){
        setDate_to_report();
        Update_table();
        canadd=false;}
        else {
                    JOptionPane.showMessageDialog(null, "Добавление не возможно, выберете пожалуйста бригаду.");

        }
        
// TODO add your handling code here:
    } catch (SQLException ex) {
        Logger.getLogger(earn_work.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jXButton1ActionPerformed

    private void _workingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__workingMouseClicked
        int row = _working.getSelectedRow();
        String Table_click=(_working.getModel().getValueAt(row, 0).toString());
        
        try{
            String sql="SELECT Shift FROM autoclean_v1.worker_order where Shift='"+Table_click+"'";
        
         pst =conn.prepareStatement(sql);
            rs=pst.executeQuery();
            if(rs.next()){
                 String add1 = rs.getString("Shift");
                 working_r=add1;
                 Timestamp dt=Timestamp.valueOf(LocalDateTime.now());

              String sql2=  "SELECT Current_datime as Время, Earnings as Общий_баланс, Сashbox  as Касса,  Non_cash as БезНал, \n"
                      + " Сhek as Чек, Free_client as Бесплатн,   Number_of_car as НомерАвто,  Current_balance as Остаток, \n "
                      + " Shift as  Бригада FROM autoclean_v1.worker_order where Shift='"+working_r+"' AND \n "
                      + "Current_datime BETWEEN '"+data_of_order+"' AND '"+dt+"'  AND \n  "
                      + "Current_datime BETWEEN '"+data_of_order+"' AND '"+dt+"'";   
           
              Update_table();  
            try{
   
pst = conn.prepareStatement(sql2);
rs=pst.executeQuery();
_worker_report.setModel(DbUtils.resultSetToTableModel(rs));


}
catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }   
                            
 }}
            catch (SQLException ex) {
        Logger.getLogger(earn_work.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event__workingMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(earn_work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(earn_work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(earn_work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(earn_work.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new earn_work().setVisible(true);
            }
        });
    }

public String data_of_order;
public String time_of_order;
public Timestamp datime_of_last_report;
public String dt_of_lastt_report;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXTable _work_worker;
    private org.jdesktop.swingx.JXTable _worker;
    private org.jdesktop.swingx.JXTable _worker_report;
    private org.jdesktop.swingx.JXTable _working;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private org.jdesktop.swingx.JXButton jXButton1;
    // End of variables declaration//GEN-END:variables
 
    private void Update_table() {
  Timestamp dt=Timestamp.valueOf(LocalDateTime.now());
String sql="SELECT Shift as  Бригада FROM autoclean_v1.order WHERE\n" +
"Order_dates BETWEEN '"+data_of_order+"' AND '"+dt+"'  AND\n" +
"Order_times BETWEEN '"+data_of_order+"' AND '"+dt+"'";
try{
   
pst = conn.prepareStatement(sql);
rs=pst.executeQuery();
_worker.setModel(DbUtils.resultSetToTableModel(rs));
}
    catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
String sql2="SELECT  Current_datime as Время, Earnings as Общий_баланс, Сashbox  as Касса,  Non_cash as БезНал, \n"
                      + " Сhek as Чек, Free_client as Бесплатн,   Number_of_car as НомерАвто,  Current_balance as Остаток, \n "
                      + " Shift as  Бригада FROM autoclean_v1.worker_order";
try{
pst = conn.prepareStatement(sql2);
rs=pst.executeQuery();
_worker_report.setModel(DbUtils.resultSetToTableModel(rs));
}
 catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
String sql3="SELECT Shift as Бригада FROM autoclean_v1.worker_order WHERE\n" +
"Current_datime BETWEEN '"+data_of_order+"' AND '"+dt+"'  AND\n" +
"Current_datime BETWEEN '"+data_of_order+"' AND '"+dt+"'";
try{
pst = conn.prepareStatement(sql3);
rs=pst.executeQuery();
_working.setModel(DbUtils.resultSetToTableModel(rs));
}
 catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
}
    public double total_of_order=0;
public double earnings=0;
public double cashbox=0;
public double non_cash=0;
public double chek=0;
public int count_car=0;
public int count_free_car=0;
public double ref_expenses=0;
public double balans_of_day=0;
public String cashier;
public String admin;
   
  private void _get_last_Summ_of_order() throws SQLException{
        Timestamp dt=Timestamp.valueOf(LocalDateTime.now());
   
  String sql="select sum(`order`.Summa) from autoclean_v1.`order` \n "
          + "where `order`.Shift='"+working+"' AND `order`.Order_dates BETWEEN '"+data_of_order+"' and '"+dt+"'"
          + "and Order_times BETWEEN '"+time_of_order+"' and '"+dt+"' and Payed='Да'";
  pst=conn.prepareStatement(sql);
  rs=pst.executeQuery();
  if (rs.next()){
      total_of_order=rs.getDouble("sum(`order`.Summa)");
            
    }
  

}
  private void setDate_to_report() throws SQLException{
      get_cashbox();
      get_non_cash();
      get_chek();
      get_count_free_car();
      get_count_car();
     


       Timestamp dt=Timestamp.valueOf(LocalDateTime.now());
      // balans_of_day=total_of_order-(cashbox+non_cash+chek+ref_expenses);
      balans_of_day=cashbox-ref_expenses;
       
       
String sql="INSERT INTO worker_order (Current_datime, Earnings, Сashbox, Non_cash, Сhek, Free_client, Number_of_car,  Current_balance, Shift) \n"
        + "VALUES (?, '"+total_of_order+"', '"+cashbox+"', '"+non_cash+"', \n"
        + "'"+chek +"', '"+count_free_car+"', '"+count_car+"',  '"+balans_of_day+"',  '"+working+"')";
  pst=conn.prepareStatement(sql);
  pst.setTimestamp(1, dt);
  
  pst.executeUpdate();
  }
  private void get_cashbox() throws SQLException{
         Timestamp dt=Timestamp.valueOf(LocalDateTime.now());
  String sql="select sum(Summa) from autoclean_v1.`order` \n" +
"where `order`.Shift='"+working+"' AND `order`.Kind_payed IN('Нал') and `order`.Order_dates BETWEEN '"+data_of_order+"' and '"+dt+"' \n"
          + "and Order_times BETWEEN '"+time_of_order+"' and '"+dt+"' and Payed='Да' ";
  pst=conn.prepareStatement(sql);
 rs=pst.executeQuery();
 if(rs.next()){
 cashbox=rs.getDouble("sum(Summa)");

 }
  }
   private void get_non_cash() throws SQLException{
         Timestamp dt=Timestamp.valueOf(LocalDateTime.now());
  String sql="select sum(Summa) from autoclean_v1.`order` \n" +
"where `order`.Shift='"+working+"' AND `order`.Kind_payed IN('Без. нал') and `order`.Order_dates BETWEEN '"+data_of_order+"' and '"+dt+"'"
          + "and Order_times BETWEEN '"+time_of_order+"' and '"+dt+"'  and Payed='Да'";
  pst=conn.prepareStatement(sql);
 rs=pst.executeQuery();
 if(rs.next()){
 non_cash=rs.getDouble("sum(Summa)");

 }
  }
    private void get_chek() throws SQLException {
         Timestamp dt=Timestamp.valueOf(LocalDateTime.now());
  String sql="select sum(Summa) from autoclean_v1.`order` \n" +
"where `order`.Shift='"+working+"' AND `order`.Kind_payed IN('Чек') and `order`.Order_dates BETWEEN '"+data_of_order+"' and '"+dt+"'"
          + "and Order_times BETWEEN '"+time_of_order+"' and '"+dt+"'  and Payed='Да'";
  pst=conn.prepareStatement(sql);
 rs=pst.executeQuery();
 if(rs.next()){
 chek=rs.getDouble("sum(Summa)");

 }
  }
    private void get_count_free_car() throws SQLException{
                 Timestamp dt=Timestamp.valueOf(LocalDateTime.now());

        String sql="select count(*) from autoclean_v1.order where \n"
                + "`order`.Shift='"+working+"' AND order.Summa='0' and `order`.Order_dates BETWEEN '"+data_of_order+"' and '"+dt+"'"
          + "and Order_times BETWEEN '"+time_of_order+"' and '"+dt+"'  and Payed='Да'";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        if(rs.next()){
        count_free_car=rs.getInt("count(*)");
        } }
    private void get_count_car() throws SQLException {
         Timestamp dt=Timestamp.valueOf(LocalDateTime.now());
           String sql="select count(*)  from autoclean_v1.order where \n "
                   + "`order`.Shift='"+working+"' AND order.Summa>'0' and `order`.Order_dates BETWEEN '"+data_of_order+"' and '"+dt+"'"
          + "and Order_times BETWEEN '"+time_of_order+"' and '"+dt+"'   and Payed='Да'";
        pst=conn.prepareStatement(sql);
        rs=pst.executeQuery();
        if(rs.next()){
        count_car=rs.getInt("count(*)");
        }
    }
    private void get_expenses() throws SQLException{
    String sql="SELECT expenses.total from autoclean_v1.expenses where Current_dt BETWEEN now()- INTERVAL 1 hour and now()";
    pst=conn.prepareStatement(sql);
    rs=pst.executeQuery();
    if(rs.next()){
    ref_expenses=rs.getDouble("expenses.total");
    }
    }
}